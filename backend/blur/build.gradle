plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'com.luckvicky'
version = '1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = '0.8.12'
    reportsDirectory = layout.buildDirectory.dir('jacoco')
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    securityVersion = '3.3.0'
    securityTestVersion = '6.3.0'
    jwtVersion = '0.12.3'
}

dependencies {

    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // spring security
    implementation "org.springframework.boot:spring-boot-starter-security:${securityVersion}"
    testImplementation "org.springframework.security:spring-security-test:${securityTestVersion}"

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // database
    implementation 'com.mysql:mysql-connector-j:8.3.0'
    runtimeOnly 'com.h2database:h2'

    // redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.27.0'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // UUID
    implementation "com.fasterxml.uuid:java-uuid-generator:4.0.1"

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    //JWT
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

    // modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.1'

    //AWS
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.763'

    // test
    testImplementation 'org.assertj:assertj-core:3.21.0'

    // docker
    implementation "org.springframework.boot:spring-boot-docker-compose"

    //QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // elasticsearch
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {

    def Qdomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    reports {

        xml.required = false
        csv.required = false

        html.outputLocation = layout.buildDirectory.dir("jacoco/html")

    }

    afterEvaluate {

        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            "**/*Application*",
                            "**/health/**",
                            "**/model/*",
                            "**/exception/*",
                            "**/repository/*",
                            "**/global",
                            "**/infra"
                    ] + Qdomains)
                }))
    }

    finalizedBy 'jacocoTestCoverageVerification'

}

jacocoTestCoverageVerification {

    violationRules {

        rule {

            enabled = true
            element = 'CLASS'

            limit {

                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.6

            }

            def Qdomains = []

            for (qPattern in '**/QA'..'**/QZ') {
                Qdomains.add(qPattern + '*')
            }

            excludes = [
                    "*.*Application*",
                    "*.health.*",
                    "*.model.*",
                    "*.exception.*",
                    "*.repository.*",
                    "*.global.*",
                    "*.infra.*"
            ] + Qdomains

        }

    }

}
